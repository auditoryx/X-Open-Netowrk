name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read Node.js version from .nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        # run: npm ci --legacy-peer-deps  # (replaced by pnpm)

      - name: Run linting (warnings only)
        run: npm run lint || true

      - name: Run type checking (warnings only)
        run: npm run type-check || true

      - name: Start Firebase emulators
        run: |
          npm install -g firebase-tools
          firebase emulators:start \
            --only firestore \
            --project demo \
            --import=./data \
            --export-on-exit=./data &
          sleep 15

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_OPTIONS: "--trace-uncaught --trace-warnings"

      - name: Run emulator tests
        run: npm run test:emulator || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

          # fall-backs so PRs from forks donâ€™t fail on missing secrets
          NEXT_PUBLIC_FIREBASE_API_KEY:     ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY     || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID:  ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID  || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET:       ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET       || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID:  ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID  || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_APP_ID:               ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID               || 'ci-fallback' }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID:       ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID       || 'ci-fallback' }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        run: |
          # Check for potential secrets in code
          if grep -r "sk_live\|pk_live\|AIza" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "Potential secrets found in code!"
            exit 1
          fi

  run-agent:
    name: GitHub Agent
    on:
      issues:
        types: [opened, labeled]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: github/copilot-coding-agent@v1
        with:
          github-token: ${{ secrets.GH_AGENT_TOKEN }}
