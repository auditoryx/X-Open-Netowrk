rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public services (explore, etc)
    match /services/{serviceId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Specialized service listings
    match /artistServices/{serviceId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.artistId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.artistId || request.auth.token.admin == true
      );
    }
    match /engineerServices/{serviceId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.engineerId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.engineerId || request.auth.token.admin == true
      );
    }
    match /videographerServices/{serviceId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.videographerId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.videographerId || request.auth.token.admin == true
      );
    }
    match /studioServices/{serviceId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studioId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.studioId || request.auth.token.admin == true
      );
    }
    match /producerBeats/{beatId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.producerId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.producerId || request.auth.token.admin == true
      );
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId || request.auth.token.admin == true;

      match /activities/{activityId} {
        allow create: if request.auth.uid == userId;
        allow read: if request.auth.uid == userId || request.auth.token.admin == true;
      }
    }

    // Bookings
    match /bookings/{bookingId} {
      allow create: if request.auth != null && request.auth.uid in [request.resource.data.clientId, request.resource.data.providerId];
      allow read, update, delete: if request.auth != null && (
        request.auth.uid in [resource.data.clientId, resource.data.providerId] ||
        request.auth.token.admin == true
      );
      match /messages/{messageId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
        allow read, update, delete: if request.auth != null && (
          request.auth.uid in [
            get(/databases/$(database)/documents/bookings/$(bookingId)).data.clientId,
            get(/databases/$(database)/documents/bookings/$(bookingId)).data.providerId
          ] || request.auth.token.admin == true
        );
      }
    }

    // Direct conversations
    match /conversations/{convoId}/messages/{messageId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      allow read, update, delete: if request.auth != null;
    }

    // Reviews
    match /reviews/{reviewId} {
      allow create: if request.auth != null;
      allow read: if true;
      allow update, delete: if false;
    }

    // Disputes
    match /disputes/{disputeId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (
        request.auth.uid in [resource.data.clientId, resource.data.providerId] ||
        request.auth.token.admin == true
      );
      allow delete: if false;
    }

    // Contracts
    match /contracts/{contractId} {
      allow create: if request.auth != null && request.auth.uid in [request.resource.data.clientId, request.resource.data.providerId];
      allow read, update, delete: if request.auth != null && (
        request.auth.uid in [resource.data.clientId, resource.data.providerId] ||
        request.auth.token.admin == true
      );
    }

    // Logs
    match /activityLogs/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.token.admin == true;

      match /logs/{logId} {
        allow create: if request.auth != null && request.auth.uid == userId;
        allow read: if request.auth != null && request.auth.token.admin == true;
      }
    }

    // Notifications
    match /notifications/{userId} {
      allow read, create: if request.auth != null && request.auth.uid == userId;
    }

    // User applications and verification
    match /applications/{appId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.token.admin == true;
    }
    match /verificationRequests/{id} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.token.admin == true;
    }
    match /pendingVerifications/{id} {
      allow create: if request.auth != null;
      allow read, delete: if request.auth.token.admin == true;
    }
    match /adminApprovals/{docId} {
      allow read, write: if request.auth.token.admin == true;
    }

    // Additional public data
    match /leaderboards/{boardId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }

    // Booking requests
    match /bookingRequests/{requestId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || request.auth.token.admin == true
      );
    }

    // Availability
    match /availability/{id} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read: if true;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.uid || request.auth.token.admin == true
      );
    }
    match /studioAvailability/{id} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studioId;
      allow read: if true;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.studioId || request.auth.token.admin == true
      );
    }

    // Profiles approved by admins
    match /profiles/{profileId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }

    // Logging collections
    match /stripe_logs/{logId} {
      allow create: if request.auth != null;
      allow read: if request.auth.token.admin == true;
    }
    match /errorLogs/{logId} {
      allow read, write: if request.auth.token.admin == true;
    }

    // Reports for creator listings or users
    match /reports/{id} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.token.admin == true;
    }

    // Optional Admin Data
    match /admin/{docId} {
      allow read, write: if request.auth.token.admin == true;
    }

    // Admin only collection for managing roles/verification
    match /adminOnly/{doc} {
      allow read, write: if request.auth.token.admin == true;
    }

    // âœ… FIXED: Fallback match must be here inside the root document match
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
