rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isValidEmail(email) {
      return email is string && email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }

    function isValidString(field, minLength, maxLength) {
      return field is string && field.size() >= minLength && field.size() <= maxLength;
    }

    function isValidTimestamp(field) {
      return field is timestamp;
    }

    function hasRequiredFields(fields) {
      return fields.toSet().isSubsetOf(request.resource.data.keys().toSet());
    }

    // Rate limiting is handled at application layer via Redis/Upstash
    // Firestore rules focus on authorization, not rate limiting

    // ðŸ†• UNIFIED USERS COLLECTION - Enhanced validation
    match /users/{userId} {
      // Read permissions
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isAdmin() || 
        // Allow reading public profile data for authenticated users
        (resource.data.profileVisibility == 'public' && resource.data.isActive == true) ||
        (resource.data.profileVisibility == 'registered' && resource.data.isActive == true)
      );

      // Create permissions - users can create their own profile, admins can create any
      allow create: if isAuthenticated() && (
        isOwner(userId) || isAdmin()
      ) && 
      // Validate required fields
      hasRequiredFields(['email', 'roles', 'tier', 'verificationStatus']) &&
      isValidEmail(request.resource.data.email) &&
      request.resource.data.roles is list &&
      request.resource.data.roles.size() > 0 &&
      // Ensure all roles are valid
      request.resource.data.roles.toSet().isSubsetOf(['client', 'artist', 'producer', 'engineer', 'studio', 'videographer', 'moderator', 'admin'].toSet()) &&
      request.resource.data.tier in ['standard', 'verified', 'signature'] &&
      request.resource.data.verificationStatus in ['unverified', 'pending', 'verified', 'rejected'] &&
      request.resource.data.xp is number && request.resource.data.xp >= 0 &&
      request.resource.data.isActive == true &&
      isValidTimestamp(request.resource.data.createdAt) &&
      isValidTimestamp(request.resource.data.updatedAt);

      // Update permissions
      allow update: if isAuthenticated() && (
        // Users can update their own profile (except sensitive fields)
        (isOwner(userId) && 
         !('roles' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('verificationStatus' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('tier' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('badgeIds' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('credibilityScore' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('stats' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('counts' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('xp' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('walletId' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('isActive' in request.resource.data.diff(resource.data).affectedKeys())
        ) ||
        // Admins can update any field
        isAdmin()
      ) &&
      // Validate timestamps
      isValidTimestamp(request.resource.data.updatedAt) &&
      // Prevent changing uid
      request.resource.data.uid == resource.data.uid;

      // Delete permissions (soft delete by setting isActive = false)
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // Sub-collections for verification documents (KYC)
      match /verification/{docId} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }

      // Sub-collections for user progress/XP tracking
      match /progress/{progressId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow write: if isAuthenticated() && isAdmin(); // Only system/admin can update XP
      }
    }

    // âœ… Applications (verification) - Enhanced validation
    match /applications/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId) &&
        hasRequiredFields(['type', 'status', 'createdAt', 'email']) &&
        isValidEmail(request.resource.data.email) &&
        isValidString(request.resource.data.type, 1, 50) &&
        request.resource.data.status == 'pending' &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAdmin() && 
        request.resource.data.status in ['pending', 'approved', 'rejected'] &&
        isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if false; // Applications cannot be deleted
    }

    // âœ… Saved Filters â€“ Enhanced validation
    match /savedFilters/{docId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId) &&
        hasRequiredFields(['userId', 'filterData', 'createdAt']) &&
        isValidTimestamp(request.resource.data.createdAt);
    }

    // âœ… Reviews â€“ AX Beta: Text-only reviews, post-completion only
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.authorId) &&
        hasRequiredFields(['authorId', 'targetId', 'bookingId', 'text', 'createdAt', 'visible', 'status', 'isEditable']) &&
        isValidString(request.resource.data.text, 10, 1000) &&
        isValidTimestamp(request.resource.data.createdAt) &&
        request.resource.data.visible is bool &&
        request.resource.data.status in ['pending', 'approved', 'rejected'] &&
        request.resource.data.isEditable == false &&
        // Reviews are text-only, no media attachments allowed
        !('media' in request.resource.data) &&
        !('attachments' in request.resource.data) &&
        // AX Beta: No rating field required (text-only testimonials)
        !('rating' in request.resource.data) &&
        // Only allow after booking is paid and completed
        bookingIsPaidAndCompleted(request.resource.data.bookingId, request.resource.data.authorId) &&
        // Prevent duplicate reviews for same booking
        !exists(/databases/$(database)/documents/reviews/$(reviewId));
      allow update: if false; // Reviews cannot be updated once created (immutable)
      allow delete: if isAdmin(); // Only admins can delete reviews
    }

    // Helper function to verify booking is paid and completed and author is client
    function bookingIsPaidAndCompleted(bookingId, authorId) {
      let booking = get(/databases/$(database)/documents/bookings/$(bookingId)).data;
      return booking.status == 'completed' &&
             booking.isPaid == true &&
             booking.clientId == authorId;
    }

    // âœ… Offers â€“ Role-specific service offerings (AX Beta: no tier gating)
    match /offers/{offerId} {
      allow read: if true; // Public offers are visible to all
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'role', 'title', 'description', 'price', 'currency', 'turnaroundDays', 'revisions', 'deliverables', 'active', 'createdAt', 'updatedAt']) &&
        request.resource.data.role in ['artist', 'producer', 'engineer', 'videographer', 'studio'] &&
        isValidString(request.resource.data.title, 5, 100) &&
        isValidString(request.resource.data.description, 20, 2000) &&
        request.resource.data.price is number && request.resource.data.price >= 0 &&
        request.resource.data.currency in ['USD', 'EUR', 'GBP', 'CAD'] &&
        request.resource.data.turnaroundDays is int && request.resource.data.turnaroundDays > 0 &&
        request.resource.data.revisions is int && request.resource.data.revisions >= 0 &&
        request.resource.data.deliverables is list &&
        request.resource.data.active is bool &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isValidTimestamp(request.resource.data.updatedAt) &&
        // AX Beta: No tier gating - all users can create offers
        true;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
        // Cannot change immutable fields
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt &&
        // Validate updated timestamp
        isValidTimestamp(request.resource.data.updatedAt) &&
        // Only allow updating non-protected fields
        (!('views' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('bookings' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('completedBookings' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('avgRating' in request.resource.data.diff(resource.data)) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // âœ… Booking Requests â€“ Enhanced security
    match /bookingRequests/{docId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.buyerId) || isOwner(resource.data.sellerId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.buyerId) &&
        hasRequiredFields(['buyerId', 'sellerId', 'serviceId', 'amount', 'status', 'createdAt']) &&
        request.resource.data.status == 'pending' &&
        request.resource.data.amount is number && request.resource.data.amount > 0 &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.sellerId) || isAdmin()) &&
        request.resource.data.status in ['pending', 'accepted', 'rejected', 'completed'];
      allow delete: if false; // Booking requests cannot be deleted
    }

    // âœ… Services â€“ Enhanced validation
    match /services/{serviceId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.creatorId) &&
        hasRequiredFields(['title', 'description', 'price', 'creatorId', 'category', 'createdAt']) &&
        isValidString(request.resource.data.title, 5, 100) &&
        isValidString(request.resource.data.description, 20, 2000) &&
        request.resource.data.price is number && request.resource.data.price >= 0 &&
        isValidString(request.resource.data.category, 2, 50) &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAuthenticated() && isOwner(resource.data.creatorId) &&
        // Cannot change creator or creation date
        request.resource.data.creatorId == resource.data.creatorId &&
        request.resource.data.createdAt == resource.data.createdAt &&
        isValidTimestamp(request.resource.data.updatedAt) &&
        // Protected fields that only admins can modify
        (!('tier' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('xp' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('rankScore' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('lateDeliveries' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('tierFrozen' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('signature' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        (!('verified' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        // Cannot change immutable fields
        (!('createdAt' in request.resource.data.diff(resource.data))) &&
        (!('email' in request.resource.data.diff(resource.data)) || isAdmin()) &&
        // Validate updatedAt timestamp
        isValidTimestamp(request.resource.data.updatedAt);

      match /activities/{activityId} {
        allow create: if isAuthenticated() && isOwner(userId) &&
          hasRequiredFields(['type', 'timestamp', 'userId']) &&
          isValidString(request.resource.data.type, 1, 50) &&
          isValidTimestamp(request.resource.data.timestamp);
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow update, delete: if false; // Activities are immutable
      }

      match /media/{mediaId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create: if isAuthenticated() && isOwner(userId) &&
          hasRequiredFields(['url', 'type', 'uploadedAt']) &&
          isValidString(request.resource.data.url, 10, 500) &&
          request.resource.data.type in ['image', 'video', 'audio', 'document'] &&
          isValidTimestamp(request.resource.data.uploadedAt);
        allow update: if isAuthenticated() && isOwner(userId) &&
          // Cannot change immutable fields
          request.resource.data.uploadedAt == resource.data.uploadedAt &&
          request.resource.data.type == resource.data.type;
        allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }

    // âœ… Bookings â€“ Enhanced validation and security
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.clientId) || isOwner(resource.data.providerId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.clientId) &&
        hasRequiredFields(['clientId', 'providerId', 'serviceId', 'amount', 'status', 'createdAt']) &&
        request.resource.data.status in ['pending', 'confirmed'] &&
        request.resource.data.amount is number && request.resource.data.amount > 0 &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.clientId) || isOwner(resource.data.providerId) || isAdmin()) &&
        request.resource.data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'disputed'] &&
        // Cannot change immutable fields
        request.resource.data.clientId == resource.data.clientId &&
        request.resource.data.providerId == resource.data.providerId &&
        request.resource.data.createdAt == resource.data.createdAt &&
        isValidTimestamp(request.resource.data.updatedAt);

      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          (isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.clientId) ||
           isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.providerId));
        allow create: if isAuthenticated() && 
          isOwner(request.resource.data.senderId) &&
          (isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.clientId) ||
           isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.providerId)) &&
          hasRequiredFields(['senderId', 'content', 'timestamp']) &&
          isValidString(request.resource.data.content, 1, 2000) &&
          isValidTimestamp(request.resource.data.timestamp);
        allow update, delete: if false; // Messages are immutable
      }
    }

    // âœ… Enhanced Chat System with rate limiting
    match /chats/{bookingId}/messages/{messageId} {
      allow read: if isAuthenticated() &&
        (isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.clientUid) ||
         isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.providerUid));
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.senderUid) &&
        (isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.clientUid) ||
         isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.providerUid)) &&
        hasRequiredFields(['senderUid', 'content', 'timestamp']) &&
        isValidString(request.resource.data.content, 1, 1000) &&
        isValidTimestamp(request.resource.data.timestamp);
        // Rate limiting handled at application layer
      allow update, delete: if false; // Messages are immutable
    }

    // âœ… Encrypted Chat Messages - New E2E encryption support
    match /encryptedChatMessages/{messageId} {
      allow read: if isAuthenticated() &&
        (isOwner(resource.data.senderId) || isOwner(resource.data.recipientId)) &&
        (isOwner(get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.clientUid) ||
         isOwner(get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.providerUid));
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.senderId) &&
        (isOwner(request.resource.data.senderId) || isOwner(request.resource.data.recipientId)) &&
        (isOwner(get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.clientUid) ||
         isOwner(get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.providerUid)) &&
        hasRequiredFields(['bookingId', 'senderId', 'recipientId', 'encryptedContent', 'isEncrypted', 'timestamp']) &&
        isValidString(request.resource.data.bookingId, 10, 100) &&
        isValidString(request.resource.data.senderId, 10, 100) &&
        isValidString(request.resource.data.recipientId, 10, 100) &&
        isValidString(request.resource.data.encryptedContent, 1, 5000) && // Larger for encrypted content
        request.resource.data.isEncrypted is bool &&
        isValidTimestamp(request.resource.data.timestamp) &&
        request.resource.data.messageType in ['text', 'system'] &&
        request.resource.data.seen is bool;
        // Rate limiting handled at application layer
      allow update: if isAuthenticated() && 
        isOwner(resource.data.recipientId) &&
        // Only allow updating seen status
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['seen']) &&
        request.resource.data.seen is bool;
      allow delete: if false; // Messages are immutable
    }

    // âœ… User Chat Keys - E2E encryption key management
    match /userChatKeys/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create, update: if isAuthenticated() && isOwner(userId) &&
        hasRequiredFields(['publicKey', 'keyId', 'createdAt', 'lastUsed', 'isActive']) &&
        isValidString(request.resource.data.publicKey, 20, 500) &&
        isValidString(request.resource.data.keyId, 10, 100) &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isValidTimestamp(request.resource.data.lastUsed) &&
        request.resource.data.isActive is bool;
      allow delete: if false; // Keys are preserved for security audit
    }

    // âœ… Chat Sessions - E2E encryption session management
    match /chatSessions/{sessionId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated() && 
        (request.auth.uid in request.resource.data.participants) &&
        hasRequiredFields(['sessionId', 'participants', 'keys', 'createdAt', 'expiresAt', 'status']) &&
        isValidString(request.resource.data.sessionId, 10, 100) &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        request.resource.data.keys is map &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isValidTimestamp(request.resource.data.expiresAt) &&
        request.resource.data.status in ['pending', 'established', 'expired'];
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants) &&
        // Allow updating status and sharedSecretHash
        request.resource.data.diff(resource.data).affectedKeys().hasAll(['status']) &&
        request.resource.data.status in ['pending', 'established', 'expired'];
      allow delete: if false; // Sessions are preserved for security audit
    }

    // âœ… Disputes â€“ Enhanced validation
    match /disputes/{disputeId} {
      allow create: if isAuthenticated() &&
        hasRequiredFields(['clientId', 'providerId', 'bookingId', 'reason', 'description', 'status', 'createdAt']) &&
        (isOwner(request.resource.data.clientId) || isOwner(request.resource.data.providerId)) &&
        isValidString(request.resource.data.reason, 5, 100) &&
        isValidString(request.resource.data.description, 20, 2000) &&
        request.resource.data.status == 'open' &&
        isValidTimestamp(request.resource.data.createdAt);
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.clientId) || isOwner(resource.data.providerId) || isAdmin());
      allow update: if isAdmin() &&
        request.resource.data.status in ['open', 'investigating', 'resolved', 'closed'] &&
        isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if false; // Disputes cannot be deleted
    }

    // âœ… Contracts â€“ Enhanced validation
    match /contracts/{contractId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.clientId) || isOwner(resource.data.providerId) || isAdmin());
      allow create: if isAuthenticated() &&
        (isOwner(request.resource.data.clientId) || isOwner(request.resource.data.providerId)) &&
        hasRequiredFields(['clientId', 'providerId', 'terms', 'status', 'createdAt']) &&
        request.resource.data.status == 'draft' &&
        isValidString(request.resource.data.terms, 50, 10000) &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.clientId) || isOwner(resource.data.providerId)) &&
        request.resource.data.status in ['draft', 'pending', 'signed', 'cancelled'] &&
        isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if false; // Contracts cannot be deleted
    }

    // âœ… Activity Logs â€“ Enhanced security
    match /activityLogs/{userId} {
      allow create: if isAuthenticated() && isOwner(userId) &&
        hasRequiredFields(['userId', 'action', 'timestamp', 'details']) &&
        isValidString(request.resource.data.action, 3, 100) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow read: if isAdmin();
      allow update, delete: if false; // Activity logs are immutable
    }

    // âœ… Tiers â€“ Admin only with validation
    match /tiers/{tierId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() &&
        hasRequiredFields(['name', 'level', 'requirements', 'benefits']) &&
        isValidString(request.resource.data.name, 2, 50) &&
        request.resource.data.level is int && request.resource.data.level >= 0;
      allow delete: if false; // Tiers cannot be deleted to maintain data integrity
    }

    // âœ… Notifications â€“ Enhanced validation
    match /notifications/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && 
        (isOwner(userId) || isAdmin()) &&
        hasRequiredFields(['userId', 'type', 'title', 'message', 'createdAt']) &&
        isValidString(request.resource.data.type, 3, 50) &&
        isValidString(request.resource.data.title, 5, 100) &&
        isValidString(request.resource.data.message, 10, 500) &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAuthenticated() && isOwner(userId) &&
        // Only allow updating read status and readAt timestamp
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']) &&
        request.resource.data.read is bool;
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // âœ… Reports â€“ Enhanced validation
    match /reports/{reportId} {
      allow create: if isAuthenticated() &&
        hasRequiredFields(['reporterId', 'targetId', 'type', 'reason', 'description', 'status', 'createdAt']) &&
        isOwner(request.resource.data.reporterId) &&
        isValidString(request.resource.data.type, 3, 50) &&
        isValidString(request.resource.data.reason, 5, 100) &&
        isValidString(request.resource.data.description, 20, 1000) &&
        request.resource.data.status == 'pending' &&
        isValidTimestamp(request.resource.data.createdAt);
      allow read: if isAdmin() || isOwner(resource.data.reporterId);
      allow update: if isAdmin() &&
        request.resource.data.status in ['pending', 'investigating', 'resolved', 'dismissed'] &&
        isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if false; // Reports cannot be deleted
    }

    // âœ… Admin collections â€“ Restricted access
    match /admin/{docId} {
      allow read, write: if isAdmin();
    }

    match /adminOnly/{doc} {
      allow read, write: if isAdmin();
    }

    // âœ… XP and Gamification System â€“ Enhanced validation
    match /userProgress/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAdmin() &&
        hasRequiredFields(['userId', 'currentXP', 'totalXP', 'level', 'lastUpdated']) &&
        request.resource.data.currentXP is int && request.resource.data.currentXP >= 0 &&
        request.resource.data.totalXP is int && request.resource.data.totalXP >= 0 &&
        request.resource.data.level is int && request.resource.data.level >= 1 &&
        isValidTimestamp(request.resource.data.lastUpdated);
      allow update: if isAdmin() &&
        request.resource.data.currentXP is int && request.resource.data.currentXP >= 0 &&
        request.resource.data.totalXP >= resource.data.totalXP && // XP can only increase
        request.resource.data.level is int && request.resource.data.level >= 1 &&
        isValidTimestamp(request.resource.data.lastUpdated);
      allow delete: if false; // User progress cannot be deleted
    }

    match /xpTransactions/{transactionId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAdmin() &&
        hasRequiredFields(['userId', 'amount', 'reason', 'type', 'timestamp']) &&
        request.resource.data.amount is int &&
        isValidString(request.resource.data.reason, 5, 200) &&
        request.resource.data.type in ['earned', 'bonus', 'penalty', 'adjustment'] &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // XP transactions are immutable
    }

    match /xpAuditLog/{auditId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAdmin() &&
        hasRequiredFields(['userId', 'action', 'previousValue', 'newValue', 'adminId', 'timestamp']) &&
        isValidString(request.resource.data.action, 5, 100) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // Audit logs are immutable
    }

    match /adminXPOperations/{operationId} {
      allow read, create: if isAdmin() &&
        hasRequiredFields(['adminId', 'operation', 'targetUserId', 'amount', 'reason', 'timestamp']) &&
        isValidString(request.resource.data.operation, 3, 50) &&
        request.resource.data.amount is int &&
        isValidString(request.resource.data.reason, 10, 500) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // Admin operations are immutable
    }

    match /suspiciousActivity/{activityId} {
      allow read, create, update: if isAdmin() &&
        hasRequiredFields(['userId', 'type', 'description', 'severity', 'timestamp']) &&
        isValidString(request.resource.data.type, 5, 100) &&
        isValidString(request.resource.data.description, 10, 1000) &&
        request.resource.data.severity in ['low', 'medium', 'high', 'critical'] &&
        isValidTimestamp(request.resource.data.timestamp);
      allow delete: if false; // Suspicious activity records cannot be deleted
    }

    match /adminActions/{actionId} {
      allow read, create: if isAdmin() &&
        hasRequiredFields(['adminId', 'action', 'targetId', 'reason', 'timestamp']) &&
        isValidString(request.resource.data.action, 5, 100) &&
        isValidString(request.resource.data.reason, 10, 500) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // Admin actions are immutable
    }

    // âœ… Badge System â€“ Enhanced validation
    match /badgeDefinitions/{badgeId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() &&
        hasRequiredFields(['name', 'description', 'criteria', 'rarity', 'imageUrl']) &&
        isValidString(request.resource.data.name, 3, 50) &&
        isValidString(request.resource.data.description, 10, 500) &&
        request.resource.data.rarity in ['common', 'uncommon', 'rare', 'epic', 'legendary'] &&
        isValidString(request.resource.data.imageUrl, 10, 500);
      allow delete: if false; // Badge definitions cannot be deleted
    }

    match /userBadges/{userBadgeId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if (isAdmin() || request.auth.token.system == true) &&
        hasRequiredFields(['userId', 'badgeId', 'awardedAt', 'awardedBy']) &&
        isValidTimestamp(request.resource.data.awardedAt) &&
        // Optional expiration for dynamic badges
        (!('expiresAt' in request.resource.data) || isValidTimestamp(request.resource.data.expiresAt));
      allow update, delete: if false; // User badges are immutable once awarded
    }

    match /badgeAuditLog/{auditId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAdmin() &&
        hasRequiredFields(['userId', 'badgeId', 'action', 'adminId', 'timestamp']) &&
        request.resource.data.action in ['awarded', 'revoked'] &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // Badge audit logs are immutable
    }

    // âœ… Verification System â€“ Enhanced validation
    match /verificationApplications/{applicationId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'type', 'documents', 'status', 'submittedAt']) &&
        request.resource.data.type in ['identity', 'professional', 'business'] &&
        request.resource.data.status == 'pending' &&
        isValidTimestamp(request.resource.data.submittedAt);
      allow update: if isAdmin() &&
        request.resource.data.status in ['pending', 'approved', 'rejected', 'requires_more_info'] &&
        isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if false; // Verification applications cannot be deleted
    }

    match /verificationActivityLog/{logId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAdmin() &&
        hasRequiredFields(['userId', 'action', 'adminId', 'details', 'timestamp']) &&
        isValidString(request.resource.data.action, 5, 100) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if false; // Verification activity logs are immutable
    }

    match /userViolations/{violationId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create, update: if isAdmin() &&
        hasRequiredFields(['userId', 'type', 'description', 'severity', 'status', 'createdAt']) &&
        isValidString(request.resource.data.type, 5, 100) &&
        isValidString(request.resource.data.description, 10, 1000) &&
        request.resource.data.severity in ['minor', 'major', 'severe', 'critical'] &&
        request.resource.data.status in ['active', 'resolved', 'dismissed'] &&
        isValidTimestamp(request.resource.data.createdAt);
      allow delete: if false; // Violations cannot be deleted
    }

    // âœ… Session Management â€“ New collection for tracking sessions
    match /userSessions/{sessionId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'sessionToken', 'createdAt', 'expiresAt', 'ipAddress', 'userAgent']) &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isValidTimestamp(request.resource.data.expiresAt) &&
        request.resource.data.expiresAt > request.resource.data.createdAt;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
        // Only allow updating lastActivity and expiresAt
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity', 'expiresAt']) &&
        isValidTimestamp(request.resource.data.lastActivity);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // âœ… Error Logs â€“ For system monitoring
    match /errorLogs/{errorId} {
      allow create: if isAuthenticated() &&
        hasRequiredFields(['userId', 'error', 'context', 'timestamp', 'severity']) &&
        isValidString(request.resource.data.error, 10, 2000) &&
        request.resource.data.severity in ['low', 'medium', 'high', 'critical'] &&
        isValidTimestamp(request.resource.data.timestamp);
      allow read: if isAdmin();
      allow update, delete: if false; // Error logs are immutable
    }

    // âœ… Stripe Logs â€“ Enhanced validation for payment logging
    match /stripe_logs/{logId} {
      allow create: if isAuthenticated() &&
        hasRequiredFields(['type', 'timestamp']) &&
        isValidString(request.resource.data.type, 5, 100) &&
        isValidTimestamp(request.resource.data.timestamp);
      allow read: if isAdmin();
      allow update, delete: if false; // Stripe logs are immutable
    }

    // âœ… Default Deny All â€“ Security fallback
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
